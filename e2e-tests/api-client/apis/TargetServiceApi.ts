/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: BUSL-1.1
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Boundary controller HTTP API
 * Welcome to the Boundary controller HTTP API documentation. This page provides a reference guide for using the Boundary controller API, a JSON-based HTTP API. The API implements commonly seen HTTP API patterns for status codes, paths, and errors. See the [API overview](https://developer.hashicorp.com/boundary/docs/api-clients/api) for more information.  Before you read this page, it is useful to understand Boundary\'s [domain model](https://developer.hashicorp.com/boundary/docs/concepts/domain-model) and to be aware of the terminology used here. To get started, search for the service you want to interact with in the sidebar to the left. Each resource in Boundary, such as accounts and credential stores, has its own service. Each service contains all the API endpoints for the resource. ## Status codes - `2XX`: Boundary returns a code between `200` and `299` on success. Generally this is `200`, but implementations should be prepared to accept any `2XX` status code as indicating success. If a call returns a `2XX` code that is not `200`, it follows well-understood semantics for those status codes. - `400`: Boundary returns `400` when a command cannot be completed due to invalid user input, except for a properly-formatted identifier that does not map to an existing resource, which returns a `404` as discussed below. - `401`: Boundary returns `401` if no authentication token is provided or if the provided token is invalid. A valid token that simply does not have permission for a resource returns a `403` instead. A token that is invalid or missing, but where the anonymous user (`u_anon`) is able to successfully perform the action, will not return a `401` but instead will return the result of the action. - `403`: Boundary returns `403` if a provided token was valid but does not have the grants required to perform the requested action. - `404`: Boundary returns `404` if a resource cannot be found. Note that this happens _prior_ to authentication/authorization checking in nearly all cases as the resource information (such as its scope, available actions, etc.) is a required part of that check. As a result, an action against a resource that does not exist returns a `404` instead of a `401` or `403`. While this could be considered an information leak, since IDs are randomly generated and this only discloses whether an ID is valid, it\'s tolerable as it allows for far simpler and more robust client implementation. - `405`: Boundary returns a `405` to indicate that the method (HTTP verb or custom action) is not implemented for the given resource. - `429`: Boundary returns a `429` if any of the API rate limit quotas have been exhausted for the resource and action. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. - `500`: Boundary returns `500` if an error occurred that is not (directly) tied to invalid user input. If a `500` is generated, information about the error is logged to Boundary\'s server log but is not generally provided to the client. - `503`: Boundary returns a `503` if it is unable to store a quota due to the API rate limit being exceeded. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. ## List pagination Boundary uses [API pagination](https://developer.hashicorp.com/boundary/docs/api-clients/api/pagination) to support searching and filtering large lists of results efficiently.
 *
 * The version of the OpenAPI document: 0.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllerApiResourcesTargetsV1SessionAuthorization,
  ControllerApiResourcesTargetsV1Target,
  ControllerApiServicesV1ListTargetsResponse,
  ControllerApiServicesV1TargetServiceAddTargetCredentialSourcesBody,
  ControllerApiServicesV1TargetServiceAddTargetHostSourcesBody,
  ControllerApiServicesV1TargetServiceAuthorizeSessionBody,
  ControllerApiServicesV1TargetServiceRemoveTargetCredentialSourcesBody,
  ControllerApiServicesV1TargetServiceRemoveTargetHostSourcesBody,
  ControllerApiServicesV1TargetServiceSetTargetCredentialSourcesBody,
  ControllerApiServicesV1TargetServiceSetTargetHostSourcesBody,
  ControllerApiV1Error,
} from '../models/index';
import {
    ControllerApiResourcesTargetsV1SessionAuthorizationFromJSON,
    ControllerApiResourcesTargetsV1SessionAuthorizationToJSON,
    ControllerApiResourcesTargetsV1TargetFromJSON,
    ControllerApiResourcesTargetsV1TargetToJSON,
    ControllerApiServicesV1ListTargetsResponseFromJSON,
    ControllerApiServicesV1ListTargetsResponseToJSON,
    ControllerApiServicesV1TargetServiceAddTargetCredentialSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceAddTargetCredentialSourcesBodyToJSON,
    ControllerApiServicesV1TargetServiceAddTargetHostSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceAddTargetHostSourcesBodyToJSON,
    ControllerApiServicesV1TargetServiceAuthorizeSessionBodyFromJSON,
    ControllerApiServicesV1TargetServiceAuthorizeSessionBodyToJSON,
    ControllerApiServicesV1TargetServiceRemoveTargetCredentialSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceRemoveTargetCredentialSourcesBodyToJSON,
    ControllerApiServicesV1TargetServiceRemoveTargetHostSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceRemoveTargetHostSourcesBodyToJSON,
    ControllerApiServicesV1TargetServiceSetTargetCredentialSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceSetTargetCredentialSourcesBodyToJSON,
    ControllerApiServicesV1TargetServiceSetTargetHostSourcesBodyFromJSON,
    ControllerApiServicesV1TargetServiceSetTargetHostSourcesBodyToJSON,
    ControllerApiV1ErrorFromJSON,
    ControllerApiV1ErrorToJSON,
} from '../models/index';

export interface TargetServiceAddTargetCredentialSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceAddTargetCredentialSourcesBody;
}

export interface TargetServiceAddTargetHostSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceAddTargetHostSourcesBody;
}

export interface TargetServiceAuthorizeSessionRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceAuthorizeSessionBody;
}

export interface TargetServiceCreateTargetRequest {
    item: Omit<ControllerApiResourcesTargetsV1Target, 'id'|'created_time'|'updated_time'|'host_source_ids'|'host_sources'|'brokered_credential_source_ids'|'brokered_credential_sources'|'injected_application_credential_source_ids'|'injected_application_credential_sources'|'authorized_actions'|'aliases'>;
}

export interface TargetServiceDeleteTargetRequest {
    id: string;
}

export interface TargetServiceGetTargetRequest {
    id: string;
}

export interface TargetServiceListTargetsRequest {
    scopeId?: string;
    recursive?: boolean;
    filter?: string;
    listToken?: string;
    pageSize?: number;
}

export interface TargetServiceRemoveTargetCredentialSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceRemoveTargetCredentialSourcesBody;
}

export interface TargetServiceRemoveTargetHostSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceRemoveTargetHostSourcesBody;
}

export interface TargetServiceSetTargetCredentialSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceSetTargetCredentialSourcesBody;
}

export interface TargetServiceSetTargetHostSourcesRequest {
    id: string;
    body: ControllerApiServicesV1TargetServiceSetTargetHostSourcesBody;
}

export interface TargetServiceUpdateTargetRequest {
    id: string;
    item: Omit<ControllerApiResourcesTargetsV1Target, 'id'|'created_time'|'updated_time'|'host_source_ids'|'host_sources'|'brokered_credential_source_ids'|'brokered_credential_sources'|'injected_application_credential_source_ids'|'injected_application_credential_sources'|'authorized_actions'|'aliases'>;
}

/**
 * 
 */
export class TargetServiceApi extends runtime.BaseAPI {

    /**
     * Adds existing Credential Sources to a Target.
     */
    async targetServiceAddTargetCredentialSourcesRaw(requestParameters: TargetServiceAddTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceAddTargetCredentialSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceAddTargetCredentialSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:add-credential-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceAddTargetCredentialSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Adds existing Credential Sources to a Target.
     */
    async targetServiceAddTargetCredentialSources(requestParameters: TargetServiceAddTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceAddTargetCredentialSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds existing Host Sources to a Target. Cannot be used on targets that have their address field set.
     */
    async targetServiceAddTargetHostSourcesRaw(requestParameters: TargetServiceAddTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceAddTargetHostSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceAddTargetHostSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:add-host-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceAddTargetHostSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Adds existing Host Sources to a Target. Cannot be used on targets that have their address field set.
     */
    async targetServiceAddTargetHostSources(requestParameters: TargetServiceAddTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceAddTargetHostSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authorizes a Session.
     */
    async targetServiceAuthorizeSessionRaw(requestParameters: TargetServiceAuthorizeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1SessionAuthorization>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceAuthorizeSession().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceAuthorizeSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:authorize-session`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceAuthorizeSessionBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1SessionAuthorizationFromJSON(jsonValue));
    }

    /**
     * Authorizes a Session.
     */
    async targetServiceAuthorizeSession(requestParameters: TargetServiceAuthorizeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1SessionAuthorization> {
        const response = await this.targetServiceAuthorizeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a single Target.
     */
    async targetServiceCreateTargetRaw(requestParameters: TargetServiceCreateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling targetServiceCreateTarget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesTargetsV1TargetToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Creates a single Target.
     */
    async targetServiceCreateTarget(requestParameters: TargetServiceCreateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceCreateTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Target.
     */
    async targetServiceDeleteTargetRaw(requestParameters: TargetServiceDeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceDeleteTarget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a Target.
     */
    async targetServiceDeleteTarget(requestParameters: TargetServiceDeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.targetServiceDeleteTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single Target.
     */
    async targetServiceGetTargetRaw(requestParameters: TargetServiceGetTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceGetTarget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Gets a single Target.
     */
    async targetServiceGetTarget(requestParameters: TargetServiceGetTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceGetTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Targets.
     */
    async targetServiceListTargetsRaw(requestParameters: TargetServiceListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiServicesV1ListTargetsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['scopeId'] != null) {
            queryParameters['scope_id'] = requestParameters['scopeId'];
        }

        if (requestParameters['recursive'] != null) {
            queryParameters['recursive'] = requestParameters['recursive'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['listToken'] != null) {
            queryParameters['list_token'] = requestParameters['listToken'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiServicesV1ListTargetsResponseFromJSON(jsonValue));
    }

    /**
     * Lists all Targets.
     */
    async targetServiceListTargets(requestParameters: TargetServiceListTargetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiServicesV1ListTargetsResponse> {
        const response = await this.targetServiceListTargetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes Credential Sources from the Target.
     */
    async targetServiceRemoveTargetCredentialSourcesRaw(requestParameters: TargetServiceRemoveTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceRemoveTargetCredentialSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceRemoveTargetCredentialSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:remove-credential-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceRemoveTargetCredentialSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Removes Credential Sources from the Target.
     */
    async targetServiceRemoveTargetCredentialSources(requestParameters: TargetServiceRemoveTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceRemoveTargetCredentialSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes Host Sources from the Target.
     */
    async targetServiceRemoveTargetHostSourcesRaw(requestParameters: TargetServiceRemoveTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceRemoveTargetHostSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceRemoveTargetHostSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:remove-host-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceRemoveTargetHostSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Removes Host Sources from the Target.
     */
    async targetServiceRemoveTargetHostSources(requestParameters: TargetServiceRemoveTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceRemoveTargetHostSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the Credential Sources on the Target.
     */
    async targetServiceSetTargetCredentialSourcesRaw(requestParameters: TargetServiceSetTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceSetTargetCredentialSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceSetTargetCredentialSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:set-credential-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceSetTargetCredentialSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Sets the Credential Sources on the Target.
     */
    async targetServiceSetTargetCredentialSources(requestParameters: TargetServiceSetTargetCredentialSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceSetTargetCredentialSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sources the Host Sources on the Target. Cannot be used on targets that have their address field set.
     */
    async targetServiceSetTargetHostSourcesRaw(requestParameters: TargetServiceSetTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceSetTargetHostSources().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling targetServiceSetTargetHostSources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}:set-host-sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1TargetServiceSetTargetHostSourcesBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Sources the Host Sources on the Target. Cannot be used on targets that have their address field set.
     */
    async targetServiceSetTargetHostSources(requestParameters: TargetServiceSetTargetHostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceSetTargetHostSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Target.
     */
    async targetServiceUpdateTargetRaw(requestParameters: TargetServiceUpdateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesTargetsV1Target>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling targetServiceUpdateTarget().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling targetServiceUpdateTarget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/targets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesTargetsV1TargetToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesTargetsV1TargetFromJSON(jsonValue));
    }

    /**
     * Updates a Target.
     */
    async targetServiceUpdateTarget(requestParameters: TargetServiceUpdateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesTargetsV1Target> {
        const response = await this.targetServiceUpdateTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
