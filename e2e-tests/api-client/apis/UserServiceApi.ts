/* tslint:disable */
/* eslint-disable */
/**
 * Boundary controller HTTP API
 * Welcome to the Boundary controller HTTP API documentation. This page provides a reference guide for using the Boundary controller API, a JSON-based HTTP API. The API implements commonly seen HTTP API patterns for status codes, paths, and errors. See the [API overview](https://developer.hashicorp.com/boundary/docs/api-clients/api) for more information.  Before you read this page, it is useful to understand Boundary\'s [domain model](https://developer.hashicorp.com/boundary/docs/concepts/domain-model) and to be aware of the terminology used here. To get started, search for the service you want to interact with in the sidebar to the left. Each resource in Boundary, such as accounts and credential stores, has its own service. Each service contains all the API endpoints for the resource. ## Status codes - `2XX`: Boundary returns a code between `200` and `299` on success. Generally this is `200`, but implementations should be prepared to accept any `2XX` status code as indicating success. If a call returns a `2XX` code that is not `200`, it follows well-understood semantics for those status codes. - `400`: Boundary returns `400` when a command cannot be completed due to invalid user input, except for a properly-formatted identifier that does not map to an existing resource, which returns a `404` as discussed below. - `401`: Boundary returns `401` if no authentication token is provided or if the provided token is invalid. A valid token that simply does not have permission for a resource returns a `403` instead. A token that is invalid or missing, but where the anonymous user (`u_anon`) is able to successfully perform the action, will not return a `401` but instead will return the result of the action. - `403`: Boundary returns `403` if a provided token was valid but does not have the grants required to perform the requested action. - `404`: Boundary returns `404` if a resource cannot be found. Note that this happens _prior_ to authentication/authorization checking in nearly all cases as the resource information (such as its scope, available actions, etc.) is a required part of that check. As a result, an action against a resource that does not exist returns a `404` instead of a `401` or `403`. While this could be considered an information leak, since IDs are randomly generated and this only discloses whether an ID is valid, it\'s tolerable as it allows for far simpler and more robust client implementation. - `405`: Boundary returns a `405` to indicate that the method (HTTP verb or custom action) is not implemented for the given resource. - `429`: Boundary returns a `429` if any of the API rate limit quotas have been exhausted for the resource and action. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. - `500`: Boundary returns `500` if an error occurred that is not (directly) tied to invalid user input. If a `500` is generated, information about the error is logged to Boundary\'s server log but is not generally provided to the client. - `503`: Boundary returns a `503` if it is unable to store a quota due to the API rate limit being exceeded. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. ## List pagination Boundary uses [API pagination](https://developer.hashicorp.com/boundary/docs/api-clients/api/pagination) to support searching and filtering large lists of results efficiently.
 *
 * The version of the OpenAPI document: 0.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllerApiResourcesUsersV1User,
  ControllerApiServicesV1ListResolvableAliasesResponse,
  ControllerApiServicesV1ListUsersResponse,
  ControllerApiServicesV1UserServiceAddUserAccountsBody,
  ControllerApiServicesV1UserServiceRemoveUserAccountsBody,
  ControllerApiServicesV1UserServiceSetUserAccountsBody,
  ControllerApiV1Error,
} from '../models/index';
import {
    ControllerApiResourcesUsersV1UserFromJSON,
    ControllerApiResourcesUsersV1UserToJSON,
    ControllerApiServicesV1ListResolvableAliasesResponseFromJSON,
    ControllerApiServicesV1ListResolvableAliasesResponseToJSON,
    ControllerApiServicesV1ListUsersResponseFromJSON,
    ControllerApiServicesV1ListUsersResponseToJSON,
    ControllerApiServicesV1UserServiceAddUserAccountsBodyFromJSON,
    ControllerApiServicesV1UserServiceAddUserAccountsBodyToJSON,
    ControllerApiServicesV1UserServiceRemoveUserAccountsBodyFromJSON,
    ControllerApiServicesV1UserServiceRemoveUserAccountsBodyToJSON,
    ControllerApiServicesV1UserServiceSetUserAccountsBodyFromJSON,
    ControllerApiServicesV1UserServiceSetUserAccountsBodyToJSON,
    ControllerApiV1ErrorFromJSON,
    ControllerApiV1ErrorToJSON,
} from '../models/index';

export interface UserServiceAddUserAccountsRequest {
    id: string;
    body: ControllerApiServicesV1UserServiceAddUserAccountsBody;
}

export interface UserServiceCreateUserRequest {
    item: Omit<ControllerApiResourcesUsersV1User, 'id'|'created_time'|'updated_time'|'account_ids'|'accounts'|'authorized_actions'|'login_name'|'full_name'|'email'|'primary_account_id'>;
}

export interface UserServiceDeleteUserRequest {
    id: string;
}

export interface UserServiceGetUserRequest {
    id: string;
}

export interface UserServiceListResolvableAliasesRequest {
    id: string;
    listToken?: string;
    pageSize?: number;
}

export interface UserServiceListUsersRequest {
    scopeId?: string;
    recursive?: boolean;
    filter?: string;
    listToken?: string;
    pageSize?: number;
}

export interface UserServiceRemoveUserAccountsRequest {
    id: string;
    body: ControllerApiServicesV1UserServiceRemoveUserAccountsBody;
}

export interface UserServiceSetUserAccountsRequest {
    id: string;
    body: ControllerApiServicesV1UserServiceSetUserAccountsBody;
}

export interface UserServiceUpdateUserRequest {
    id: string;
    item: Omit<ControllerApiResourcesUsersV1User, 'id'|'created_time'|'updated_time'|'account_ids'|'accounts'|'authorized_actions'|'login_name'|'full_name'|'email'|'primary_account_id'>;
}

/**
 * 
 */
export class UserServiceApi extends runtime.BaseAPI {

    /**
     * Associates an Account to a User.
     */
    async userServiceAddUserAccountsRaw(requestParameters: UserServiceAddUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceAddUserAccounts().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userServiceAddUserAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}:add-accounts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1UserServiceAddUserAccountsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Associates an Account to a User.
     */
    async userServiceAddUserAccounts(requestParameters: UserServiceAddUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceAddUserAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a single User.
     */
    async userServiceCreateUserRaw(requestParameters: UserServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling userServiceCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesUsersV1UserToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Creates a single User.
     */
    async userServiceCreateUser(requestParameters: UserServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a User.
     */
    async userServiceDeleteUserRaw(requestParameters: UserServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a User.
     */
    async userServiceDeleteUser(requestParameters: UserServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userServiceDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single User.
     */
    async userServiceGetUserRaw(requestParameters: UserServiceGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Gets a single User.
     */
    async userServiceGetUser(requestParameters: UserServiceGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Aliases which point to a resource for which the requester has some permission.
     */
    async userServiceListResolvableAliasesRaw(requestParameters: UserServiceListResolvableAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiServicesV1ListResolvableAliasesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceListResolvableAliases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['listToken'] != null) {
            queryParameters['list_token'] = requestParameters['listToken'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}:list-resolvable-aliases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiServicesV1ListResolvableAliasesResponseFromJSON(jsonValue));
    }

    /**
     * Lists all Aliases which point to a resource for which the requester has some permission.
     */
    async userServiceListResolvableAliases(requestParameters: UserServiceListResolvableAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiServicesV1ListResolvableAliasesResponse> {
        const response = await this.userServiceListResolvableAliasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Users.
     */
    async userServiceListUsersRaw(requestParameters: UserServiceListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiServicesV1ListUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['scopeId'] != null) {
            queryParameters['scope_id'] = requestParameters['scopeId'];
        }

        if (requestParameters['recursive'] != null) {
            queryParameters['recursive'] = requestParameters['recursive'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['listToken'] != null) {
            queryParameters['list_token'] = requestParameters['listToken'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiServicesV1ListUsersResponseFromJSON(jsonValue));
    }

    /**
     * Lists all Users.
     */
    async userServiceListUsers(requestParameters: UserServiceListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiServicesV1ListUsersResponse> {
        const response = await this.userServiceListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the specified Accounts from being associated with the provided User.
     */
    async userServiceRemoveUserAccountsRaw(requestParameters: UserServiceRemoveUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceRemoveUserAccounts().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userServiceRemoveUserAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}:remove-accounts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1UserServiceRemoveUserAccountsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Removes the specified Accounts from being associated with the provided User.
     */
    async userServiceRemoveUserAccounts(requestParameters: UserServiceRemoveUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceRemoveUserAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the Accounts associated to the User to exactly the list of provided in the request, removing any Accounts that are not specified.
     */
    async userServiceSetUserAccountsRaw(requestParameters: UserServiceSetUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceSetUserAccounts().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userServiceSetUserAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}:set-accounts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1UserServiceSetUserAccountsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Set the Accounts associated to the User to exactly the list of provided in the request, removing any Accounts that are not specified.
     */
    async userServiceSetUserAccounts(requestParameters: UserServiceSetUserAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceSetUserAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a User.
     */
    async userServiceUpdateUserRaw(requestParameters: UserServiceUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesUsersV1User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userServiceUpdateUser().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling userServiceUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesUsersV1UserToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesUsersV1UserFromJSON(jsonValue));
    }

    /**
     * Updates a User.
     */
    async userServiceUpdateUser(requestParameters: UserServiceUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesUsersV1User> {
        const response = await this.userServiceUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
