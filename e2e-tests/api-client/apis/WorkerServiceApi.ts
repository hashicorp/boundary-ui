/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: BUSL-1.1
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Boundary controller HTTP API
 * Welcome to the Boundary controller HTTP API documentation. This page provides a reference guide for using the Boundary controller API, a JSON-based HTTP API. The API implements commonly seen HTTP API patterns for status codes, paths, and errors. See the [API overview](https://developer.hashicorp.com/boundary/docs/api-clients/api) for more information.  Before you read this page, it is useful to understand Boundary\'s [domain model](https://developer.hashicorp.com/boundary/docs/concepts/domain-model) and to be aware of the terminology used here. To get started, search for the service you want to interact with in the sidebar to the left. Each resource in Boundary, such as accounts and credential stores, has its own service. Each service contains all the API endpoints for the resource. ## Status codes - `2XX`: Boundary returns a code between `200` and `299` on success. Generally this is `200`, but implementations should be prepared to accept any `2XX` status code as indicating success. If a call returns a `2XX` code that is not `200`, it follows well-understood semantics for those status codes. - `400`: Boundary returns `400` when a command cannot be completed due to invalid user input, except for a properly-formatted identifier that does not map to an existing resource, which returns a `404` as discussed below. - `401`: Boundary returns `401` if no authentication token is provided or if the provided token is invalid. A valid token that simply does not have permission for a resource returns a `403` instead. A token that is invalid or missing, but where the anonymous user (`u_anon`) is able to successfully perform the action, will not return a `401` but instead will return the result of the action. - `403`: Boundary returns `403` if a provided token was valid but does not have the grants required to perform the requested action. - `404`: Boundary returns `404` if a resource cannot be found. Note that this happens _prior_ to authentication/authorization checking in nearly all cases as the resource information (such as its scope, available actions, etc.) is a required part of that check. As a result, an action against a resource that does not exist returns a `404` instead of a `401` or `403`. While this could be considered an information leak, since IDs are randomly generated and this only discloses whether an ID is valid, it\'s tolerable as it allows for far simpler and more robust client implementation. - `405`: Boundary returns a `405` to indicate that the method (HTTP verb or custom action) is not implemented for the given resource. - `429`: Boundary returns a `429` if any of the API rate limit quotas have been exhausted for the resource and action. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. - `500`: Boundary returns `500` if an error occurred that is not (directly) tied to invalid user input. If a `500` is generated, information about the error is logged to Boundary\'s server log but is not generally provided to the client. - `503`: Boundary returns a `503` if it is unable to store a quota due to the API rate limit being exceeded. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. ## List pagination Boundary uses [API pagination](https://developer.hashicorp.com/boundary/docs/api-clients/api/pagination) to support searching and filtering large lists of results efficiently.
 *
 * The version of the OpenAPI document: 0.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllerApiResourcesWorkersV1CertificateAuthority,
  ControllerApiResourcesWorkersV1Worker,
  ControllerApiServicesV1ListWorkersResponse,
  ControllerApiServicesV1WorkerServiceAddWorkerTagsBody,
  ControllerApiServicesV1WorkerServiceRemoveWorkerTagsBody,
  ControllerApiServicesV1WorkerServiceSetWorkerTagsBody,
  ControllerApiV1Error,
} from '../models/index';
import {
    ControllerApiResourcesWorkersV1CertificateAuthorityFromJSON,
    ControllerApiResourcesWorkersV1CertificateAuthorityToJSON,
    ControllerApiResourcesWorkersV1WorkerFromJSON,
    ControllerApiResourcesWorkersV1WorkerToJSON,
    ControllerApiServicesV1ListWorkersResponseFromJSON,
    ControllerApiServicesV1ListWorkersResponseToJSON,
    ControllerApiServicesV1WorkerServiceAddWorkerTagsBodyFromJSON,
    ControllerApiServicesV1WorkerServiceAddWorkerTagsBodyToJSON,
    ControllerApiServicesV1WorkerServiceRemoveWorkerTagsBodyFromJSON,
    ControllerApiServicesV1WorkerServiceRemoveWorkerTagsBodyToJSON,
    ControllerApiServicesV1WorkerServiceSetWorkerTagsBodyFromJSON,
    ControllerApiServicesV1WorkerServiceSetWorkerTagsBodyToJSON,
    ControllerApiV1ErrorFromJSON,
    ControllerApiV1ErrorToJSON,
} from '../models/index';

export interface WorkerServiceAddWorkerTagsRequest {
    id: string;
    body: ControllerApiServicesV1WorkerServiceAddWorkerTagsBody;
}

export interface WorkerServiceCreateControllerLedRequest {
    item: Omit<ControllerApiResourcesWorkersV1Worker, 'id'|'created_time'|'updated_time'|'address'|'canonical_tags'|'config_tags'|'last_status_time'|'controller_generated_activation_token'|'active_connection_count'|'type'|'api_tags'|'release_version'|'directly_connected_downstream_workers'|'authorized_actions'|'local_storage_state'|'remote_storage_state'>;
}

export interface WorkerServiceCreateWorkerLedRequest {
    item: Omit<ControllerApiResourcesWorkersV1Worker, 'id'|'created_time'|'updated_time'|'address'|'canonical_tags'|'config_tags'|'last_status_time'|'controller_generated_activation_token'|'active_connection_count'|'type'|'api_tags'|'release_version'|'directly_connected_downstream_workers'|'authorized_actions'|'local_storage_state'|'remote_storage_state'>;
}

export interface WorkerServiceDeleteWorkerRequest {
    id: string;
}

export interface WorkerServiceGetWorkerRequest {
    id: string;
}

export interface WorkerServiceListWorkersRequest {
    scopeId?: string;
    recursive?: boolean;
    filter?: string;
}

export interface WorkerServiceReadCertificateAuthorityRequest {
    scopeId?: string;
}

export interface WorkerServiceReinitializeCertificateAuthorityRequest {
    scopeId?: string;
}

export interface WorkerServiceRemoveWorkerTagsRequest {
    id: string;
    body: ControllerApiServicesV1WorkerServiceRemoveWorkerTagsBody;
}

export interface WorkerServiceSetWorkerTagsRequest {
    id: string;
    body: ControllerApiServicesV1WorkerServiceSetWorkerTagsBody;
}

export interface WorkerServiceUpdateWorkerRequest {
    id: string;
    item: Omit<ControllerApiResourcesWorkersV1Worker, 'id'|'created_time'|'updated_time'|'address'|'canonical_tags'|'config_tags'|'last_status_time'|'controller_generated_activation_token'|'active_connection_count'|'type'|'api_tags'|'release_version'|'directly_connected_downstream_workers'|'authorized_actions'|'local_storage_state'|'remote_storage_state'>;
}

/**
 * 
 */
export class WorkerServiceApi extends runtime.BaseAPI {

    /**
     * Adds api tags to an existing Worker.
     */
    async workerServiceAddWorkerTagsRaw(requestParameters: WorkerServiceAddWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceAddWorkerTags().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workerServiceAddWorkerTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}:add-worker-tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1WorkerServiceAddWorkerTagsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Adds api tags to an existing Worker.
     */
    async workerServiceAddWorkerTags(requestParameters: WorkerServiceAddWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceAddWorkerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a single Worker.
     */
    async workerServiceCreateControllerLedRaw(requestParameters: WorkerServiceCreateControllerLedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling workerServiceCreateControllerLed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers:create:controller-led`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesWorkersV1WorkerToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Creates a single Worker.
     */
    async workerServiceCreateControllerLed(requestParameters: WorkerServiceCreateControllerLedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceCreateControllerLedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a single Worker.
     */
    async workerServiceCreateWorkerLedRaw(requestParameters: WorkerServiceCreateWorkerLedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling workerServiceCreateWorkerLed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers:create:worker-led`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesWorkersV1WorkerToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Creates a single Worker.
     */
    async workerServiceCreateWorkerLed(requestParameters: WorkerServiceCreateWorkerLedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceCreateWorkerLedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Worker.
     */
    async workerServiceDeleteWorkerRaw(requestParameters: WorkerServiceDeleteWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceDeleteWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a Worker.
     */
    async workerServiceDeleteWorker(requestParameters: WorkerServiceDeleteWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.workerServiceDeleteWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single Worker.
     */
    async workerServiceGetWorkerRaw(requestParameters: WorkerServiceGetWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceGetWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Gets a single Worker.
     */
    async workerServiceGetWorker(requestParameters: WorkerServiceGetWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceGetWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Workers.
     */
    async workerServiceListWorkersRaw(requestParameters: WorkerServiceListWorkersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiServicesV1ListWorkersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['scopeId'] != null) {
            queryParameters['scope_id'] = requestParameters['scopeId'];
        }

        if (requestParameters['recursive'] != null) {
            queryParameters['recursive'] = requestParameters['recursive'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiServicesV1ListWorkersResponseFromJSON(jsonValue));
    }

    /**
     * Lists all Workers.
     */
    async workerServiceListWorkers(requestParameters: WorkerServiceListWorkersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiServicesV1ListWorkersResponse> {
        const response = await this.workerServiceListWorkersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves root certificates used for worker authentication.
     */
    async workerServiceReadCertificateAuthorityRaw(requestParameters: WorkerServiceReadCertificateAuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1CertificateAuthority>> {
        const queryParameters: any = {};

        if (requestParameters['scopeId'] != null) {
            queryParameters['scope_id'] = requestParameters['scopeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers:read-certificate-authority`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1CertificateAuthorityFromJSON(jsonValue));
    }

    /**
     * Retrieves root certificates used for worker authentication.
     */
    async workerServiceReadCertificateAuthority(requestParameters: WorkerServiceReadCertificateAuthorityRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1CertificateAuthority> {
        const response = await this.workerServiceReadCertificateAuthorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reinitializes root certificates used for worker authentication.
     */
    async workerServiceReinitializeCertificateAuthorityRaw(requestParameters: WorkerServiceReinitializeCertificateAuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1CertificateAuthority>> {
        const queryParameters: any = {};

        if (requestParameters['scopeId'] != null) {
            queryParameters['scope_id'] = requestParameters['scopeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers:reinitialize-certificate-authority`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1CertificateAuthorityFromJSON(jsonValue));
    }

    /**
     * Reinitializes root certificates used for worker authentication.
     */
    async workerServiceReinitializeCertificateAuthority(requestParameters: WorkerServiceReinitializeCertificateAuthorityRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1CertificateAuthority> {
        const response = await this.workerServiceReinitializeCertificateAuthorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes api tags from an existing Worker.
     */
    async workerServiceRemoveWorkerTagsRaw(requestParameters: WorkerServiceRemoveWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceRemoveWorkerTags().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workerServiceRemoveWorkerTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}:remove-worker-tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1WorkerServiceRemoveWorkerTagsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Removes api tags from an existing Worker.
     */
    async workerServiceRemoveWorkerTags(requestParameters: WorkerServiceRemoveWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceRemoveWorkerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets api tags for an existing Worker.
     */
    async workerServiceSetWorkerTagsRaw(requestParameters: WorkerServiceSetWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceSetWorkerTags().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workerServiceSetWorkerTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}:set-worker-tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiServicesV1WorkerServiceSetWorkerTagsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Sets api tags for an existing Worker.
     */
    async workerServiceSetWorkerTags(requestParameters: WorkerServiceSetWorkerTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceSetWorkerTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Worker.
     */
    async workerServiceUpdateWorkerRaw(requestParameters: WorkerServiceUpdateWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllerApiResourcesWorkersV1Worker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workerServiceUpdateWorker().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling workerServiceUpdateWorker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v1/workers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ControllerApiResourcesWorkersV1WorkerToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllerApiResourcesWorkersV1WorkerFromJSON(jsonValue));
    }

    /**
     * Updates a Worker.
     */
    async workerServiceUpdateWorker(requestParameters: WorkerServiceUpdateWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllerApiResourcesWorkersV1Worker> {
        const response = await this.workerServiceUpdateWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
