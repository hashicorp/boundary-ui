/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: BUSL-1.1
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Boundary controller HTTP API
 * Welcome to the Boundary controller HTTP API documentation. This page provides a reference guide for using the Boundary controller API, a JSON-based HTTP API. The API implements commonly seen HTTP API patterns for status codes, paths, and errors. See the [API overview](https://developer.hashicorp.com/boundary/docs/api-clients/api) for more information.  Before you read this page, it is useful to understand Boundary\'s [domain model](https://developer.hashicorp.com/boundary/docs/concepts/domain-model) and to be aware of the terminology used here. To get started, search for the service you want to interact with in the sidebar to the left. Each resource in Boundary, such as accounts and credential stores, has its own service. Each service contains all the API endpoints for the resource. ## Status codes - `2XX`: Boundary returns a code between `200` and `299` on success. Generally this is `200`, but implementations should be prepared to accept any `2XX` status code as indicating success. If a call returns a `2XX` code that is not `200`, it follows well-understood semantics for those status codes. - `400`: Boundary returns `400` when a command cannot be completed due to invalid user input, except for a properly-formatted identifier that does not map to an existing resource, which returns a `404` as discussed below. - `401`: Boundary returns `401` if no authentication token is provided or if the provided token is invalid. A valid token that simply does not have permission for a resource returns a `403` instead. A token that is invalid or missing, but where the anonymous user (`u_anon`) is able to successfully perform the action, will not return a `401` but instead will return the result of the action. - `403`: Boundary returns `403` if a provided token was valid but does not have the grants required to perform the requested action. - `404`: Boundary returns `404` if a resource cannot be found. Note that this happens _prior_ to authentication/authorization checking in nearly all cases as the resource information (such as its scope, available actions, etc.) is a required part of that check. As a result, an action against a resource that does not exist returns a `404` instead of a `401` or `403`. While this could be considered an information leak, since IDs are randomly generated and this only discloses whether an ID is valid, it\'s tolerable as it allows for far simpler and more robust client implementation. - `405`: Boundary returns a `405` to indicate that the method (HTTP verb or custom action) is not implemented for the given resource. - `429`: Boundary returns a `429` if any of the API rate limit quotas have been exhausted for the resource and action. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. - `500`: Boundary returns `500` if an error occurred that is not (directly) tied to invalid user input. If a `500` is generated, information about the error is logged to Boundary\'s server log but is not generally provided to the client. - `503`: Boundary returns a `503` if it is unable to store a quota due to the API rate limit being exceeded. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. ## List pagination Boundary uses [API pagination](https://developer.hashicorp.com/boundary/docs/api-clients/api/pagination) to support searching and filtering large lists of results efficiently.
 *
 * The version of the OpenAPI document: 0.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ControllerApiResourcesRolesV1Principal } from './ControllerApiResourcesRolesV1Principal';
import {
    ControllerApiResourcesRolesV1PrincipalFromJSON,
    ControllerApiResourcesRolesV1PrincipalFromJSONTyped,
    ControllerApiResourcesRolesV1PrincipalToJSON,
    ControllerApiResourcesRolesV1PrincipalToJSONTyped,
} from './ControllerApiResourcesRolesV1Principal';
import type { ControllerApiResourcesScopesV1ScopeInfo } from './ControllerApiResourcesScopesV1ScopeInfo';
import {
    ControllerApiResourcesScopesV1ScopeInfoFromJSON,
    ControllerApiResourcesScopesV1ScopeInfoFromJSONTyped,
    ControllerApiResourcesScopesV1ScopeInfoToJSON,
    ControllerApiResourcesScopesV1ScopeInfoToJSONTyped,
} from './ControllerApiResourcesScopesV1ScopeInfo';
import type { ControllerApiResourcesRolesV1Grant } from './ControllerApiResourcesRolesV1Grant';
import {
    ControllerApiResourcesRolesV1GrantFromJSON,
    ControllerApiResourcesRolesV1GrantFromJSONTyped,
    ControllerApiResourcesRolesV1GrantToJSON,
    ControllerApiResourcesRolesV1GrantToJSONTyped,
} from './ControllerApiResourcesRolesV1Grant';

/**
 * 
 * @export
 * @interface ControllerApiResourcesRolesV1Role
 */
export interface ControllerApiResourcesRolesV1Role {
    /**
     * Output only. The ID of the Role.
     * @type {string}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly id?: string;
    /**
     * The ID of the Scope containing this Role.
     * @type {string}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    scopeId?: string;
    /**
     * 
     * @type {ControllerApiResourcesScopesV1ScopeInfo}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    scope?: ControllerApiResourcesScopesV1ScopeInfo;
    /**
     * Optional name for identification purposes.
     * @type {string}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    name?: string;
    /**
     * Optional user-set description for identification purposes.
     * @type {string}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    description?: string;
    /**
     * Output only. The time this resource was created.
     * @type {Date}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly createdTime?: Date;
    /**
     * Output only. The time this resource was last updated.
     * @type {Date}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly updatedTime?: Date;
    /**
     * Version is used in mutation requests, after the initial creation, to ensure this resource has not changed.
     * The mutation will fail if the version does not match the latest known good version.
     * @type {number}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    version?: number;
    /**
     * Output only. The IDs of Scopes the grants will apply to. This can include
     * the role's own scope ID, or "this" for the same behavior; specific IDs of
     * scopes that are children of the role's scope; the value "children" to match
     * all direct child scopes of the role's scope; or the value "descendants" to
     * match all descendant scopes (e.g. child scopes, children of child scopes;
     * only valid at "global" scope since it is the only one with children of
     * children).
     * @type {Array<string>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly grantScopeIds?: Array<string>;
    /**
     * Output only. The IDs (only) of principals that are assigned to this role.
     * @type {Array<string>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly principalIds?: Array<string>;
    /**
     * Output only. The principals that are assigned to this role.
     * @type {Array<ControllerApiResourcesRolesV1Principal>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly principals?: Array<ControllerApiResourcesRolesV1Principal>;
    /**
     * Output only. The grants that this role provides for its principals.
     * @type {Array<string>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly grantStrings?: Array<string>;
    /**
     * Output only. The parsed grant information.
     * @type {Array<ControllerApiResourcesRolesV1Grant>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly grants?: Array<ControllerApiResourcesRolesV1Grant>;
    /**
     * Output only. The available actions on this resource for this user.
     * @type {Array<string>}
     * @memberof ControllerApiResourcesRolesV1Role
     */
    readonly authorizedActions?: Array<string>;
}

/**
 * Check if a given object implements the ControllerApiResourcesRolesV1Role interface.
 */
export function instanceOfControllerApiResourcesRolesV1Role(value: object): value is ControllerApiResourcesRolesV1Role {
    return true;
}

export function ControllerApiResourcesRolesV1RoleFromJSON(json: any): ControllerApiResourcesRolesV1Role {
    return ControllerApiResourcesRolesV1RoleFromJSONTyped(json, false);
}

export function ControllerApiResourcesRolesV1RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControllerApiResourcesRolesV1Role {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'scopeId': json['scope_id'] == null ? undefined : json['scope_id'],
        'scope': json['scope'] == null ? undefined : ControllerApiResourcesScopesV1ScopeInfoFromJSON(json['scope']),
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'createdTime': json['created_time'] == null ? undefined : (new Date(json['created_time'])),
        'updatedTime': json['updated_time'] == null ? undefined : (new Date(json['updated_time'])),
        'version': json['version'] == null ? undefined : json['version'],
        'grantScopeIds': json['grant_scope_ids'] == null ? undefined : json['grant_scope_ids'],
        'principalIds': json['principal_ids'] == null ? undefined : json['principal_ids'],
        'principals': json['principals'] == null ? undefined : ((json['principals'] as Array<any>).map(ControllerApiResourcesRolesV1PrincipalFromJSON)),
        'grantStrings': json['grant_strings'] == null ? undefined : json['grant_strings'],
        'grants': json['grants'] == null ? undefined : ((json['grants'] as Array<any>).map(ControllerApiResourcesRolesV1GrantFromJSON)),
        'authorizedActions': json['authorized_actions'] == null ? undefined : json['authorized_actions'],
    };
}

export function ControllerApiResourcesRolesV1RoleToJSON(json: any): ControllerApiResourcesRolesV1Role {
    return ControllerApiResourcesRolesV1RoleToJSONTyped(json, false);
}

export function ControllerApiResourcesRolesV1RoleToJSONTyped(value?: Omit<ControllerApiResourcesRolesV1Role, 'id'|'created_time'|'updated_time'|'grant_scope_ids'|'principal_ids'|'principals'|'grant_strings'|'grants'|'authorized_actions'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scope_id': value['scopeId'],
        'scope': ControllerApiResourcesScopesV1ScopeInfoToJSON(value['scope']),
        'name': value['name'],
        'description': value['description'],
        'version': value['version'],
    };
}

