/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: BUSL-1.1
 */

/* tslint:disable */
/* eslint-disable */
/**
 * Boundary controller HTTP API
 * Welcome to the Boundary controller HTTP API documentation. This page provides a reference guide for using the Boundary controller API, a JSON-based HTTP API. The API implements commonly seen HTTP API patterns for status codes, paths, and errors. See the [API overview](https://developer.hashicorp.com/boundary/docs/api-clients/api) for more information.  Before you read this page, it is useful to understand Boundary\'s [domain model](https://developer.hashicorp.com/boundary/docs/concepts/domain-model) and to be aware of the terminology used here. To get started, search for the service you want to interact with in the sidebar to the left. Each resource in Boundary, such as accounts and credential stores, has its own service. Each service contains all the API endpoints for the resource. ## Status codes - `2XX`: Boundary returns a code between `200` and `299` on success. Generally this is `200`, but implementations should be prepared to accept any `2XX` status code as indicating success. If a call returns a `2XX` code that is not `200`, it follows well-understood semantics for those status codes. - `400`: Boundary returns `400` when a command cannot be completed due to invalid user input, except for a properly-formatted identifier that does not map to an existing resource, which returns a `404` as discussed below. - `401`: Boundary returns `401` if no authentication token is provided or if the provided token is invalid. A valid token that simply does not have permission for a resource returns a `403` instead. A token that is invalid or missing, but where the anonymous user (`u_anon`) is able to successfully perform the action, will not return a `401` but instead will return the result of the action. - `403`: Boundary returns `403` if a provided token was valid but does not have the grants required to perform the requested action. - `404`: Boundary returns `404` if a resource cannot be found. Note that this happens _prior_ to authentication/authorization checking in nearly all cases as the resource information (such as its scope, available actions, etc.) is a required part of that check. As a result, an action against a resource that does not exist returns a `404` instead of a `401` or `403`. While this could be considered an information leak, since IDs are randomly generated and this only discloses whether an ID is valid, it\'s tolerable as it allows for far simpler and more robust client implementation. - `405`: Boundary returns a `405` to indicate that the method (HTTP verb or custom action) is not implemented for the given resource. - `429`: Boundary returns a `429` if any of the API rate limit quotas have been exhausted for the resource and action. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. - `500`: Boundary returns `500` if an error occurred that is not (directly) tied to invalid user input. If a `500` is generated, information about the error is logged to Boundary\'s server log but is not generally provided to the client. - `503`: Boundary returns a `503` if it is unable to store a quota due to the API rate limit being exceeded. It includes the `Retry-After` header so that the client knows how long to wait before making a new request. ## List pagination Boundary uses [API pagination](https://developer.hashicorp.com/boundary/docs/api-clients/api/pagination) to support searching and filtering large lists of results efficiently.
 *
 * The version of the OpenAPI document: 0.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GoogleProtobufAny } from './GoogleProtobufAny';
import {
    GoogleProtobufAnyFromJSON,
    GoogleProtobufAnyFromJSONTyped,
    GoogleProtobufAnyToJSON,
    GoogleProtobufAnyToJSONTyped,
} from './GoogleProtobufAny';

/**
 * Message that represents an arbitrary HTTP body. It should only be used for
 * payload formats that can't be represented as JSON, such as raw binary or
 * an HTML page.
 * 
 * 
 * This message can be used both in streaming and non-streaming API methods in
 * the request as well as the response.
 * 
 * It can be used as a top-level request field, which is convenient if one
 * wants to extract parameters from either the URL or HTTP template into the
 * request fields and also want access to the raw HTTP body.
 * 
 * Example:
 * 
 *     message GetResourceRequest {
 *       // A unique request id.
 *       string request_id = 1;
 * 
 *       // The raw HTTP body is bound to this field.
 *       google.api.HttpBody http_body = 2;
 * 
 *     }
 * 
 *     service ResourceService {
 *       rpc GetResource(GetResourceRequest)
 *         returns (google.api.HttpBody);
 *       rpc UpdateResource(google.api.HttpBody)
 *         returns (google.protobuf.Empty);
 * 
 *     }
 * 
 * Example with streaming methods:
 * 
 *     service CaldavService {
 *       rpc GetCalendar(stream google.api.HttpBody)
 *         returns (stream google.api.HttpBody);
 *       rpc UpdateCalendar(stream google.api.HttpBody)
 *         returns (stream google.api.HttpBody);
 * 
 *     }
 * 
 * Use of this type only changes how the request and response bodies are
 * handled, all other features will continue to work unchanged.
 * @export
 * @interface GoogleApiHttpBody
 */
export interface GoogleApiHttpBody {
    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     * @type {string}
     * @memberof GoogleApiHttpBody
     */
    contentType?: string;
    /**
     * The HTTP request/response body as raw binary.
     * @type {string}
     * @memberof GoogleApiHttpBody
     */
    data?: string;
    /**
     * Application specific response metadata. Must be set in the first response
     * for streaming APIs.
     * @type {Array<GoogleProtobufAny>}
     * @memberof GoogleApiHttpBody
     */
    extensions?: Array<GoogleProtobufAny>;
}

/**
 * Check if a given object implements the GoogleApiHttpBody interface.
 */
export function instanceOfGoogleApiHttpBody(value: object): value is GoogleApiHttpBody {
    return true;
}

export function GoogleApiHttpBodyFromJSON(json: any): GoogleApiHttpBody {
    return GoogleApiHttpBodyFromJSONTyped(json, false);
}

export function GoogleApiHttpBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoogleApiHttpBody {
    if (json == null) {
        return json;
    }
    return {
        
        'contentType': json['content_type'] == null ? undefined : json['content_type'],
        'data': json['data'] == null ? undefined : json['data'],
        'extensions': json['extensions'] == null ? undefined : ((json['extensions'] as Array<any>).map(GoogleProtobufAnyFromJSON)),
    };
}

export function GoogleApiHttpBodyToJSON(json: any): GoogleApiHttpBody {
    return GoogleApiHttpBodyToJSONTyped(json, false);
}

export function GoogleApiHttpBodyToJSONTyped(value?: GoogleApiHttpBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content_type': value['contentType'],
        'data': value['data'],
        'extensions': value['extensions'] == null ? undefined : ((value['extensions'] as Array<any>).map(GoogleProtobufAnyToJSON)),
    };
}

